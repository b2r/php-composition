<?php

namespace {{ namespace }};

use {{ target }};

/**
 * {{ target }} composition {{ classType }}
 *
 * @flag autoGenerated
 */
{{ classType }} {{ name }}
{
	/**
	 * @var \{{ target }}
	 */
	private ${{ property }} = null;

	public function {{ getter }}(): {{ targetName }}
	{
		return $this->{{ property }};
	}

	public function {{ setter }}({{ targetName }} ${{ property }})
	{
		$this->{{ property }} = ${{ property }};
		return $this;
	}

	//------------------------------------------------------------
	//	Methods
	//------------------------------------------------------------
{% for method in methods %}

	/**
	 * @invoke \{{ target }}::{{ method.name }}
	 */
	public function {{ method.name }}()
	{
{% if method.argc  %}
		return $this->{{ property }}->{{ method.name }}(...func_get_args());
{% else %}
		return $this->{{ property }}->{{ method.name }}();
{% endif %}
	}
{% endfor %}
{% if aliases %}

	//------------------------------------------------------------
	//	Alliases
	//------------------------------------------------------------
{% for method in aliases %}

	/**
	 * @invoke \{{ target }}::{{ method.name }}
	 */
	public function {{ method.alias }}()
	{
{% if method.argc  %}
		return $this->{{ property }}->{{ method.name }}(...func_get_args());
{% else %}
		return $this->{{ property }}->{{ method.name }}();
{% endif %}
	}
{% endfor %}
{% endif %}
}
